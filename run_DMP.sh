#!/bin/bash

## Helper script to run DeepMetaPSICOV, v1.0
## Shaun Kandathil, 2018

trap 'echo "User interrupt; exiting."; exit 0' INT KILL

maindir=$(dirname $0) # do not change

# default location of most programs used for input feature generation 
# programs compiled by src/Makefile are stored here.
bindir=$maindir/bin

######################################################
# User variables (change these as needed)

# python executable with required modules
python=$HOME/miniconda3/bin/python

# path to HH-suite and HHblits executable
hhsuite_dir=$HOME/working/DMP/hh-suite-patched
hhblits=$hhsuite_dir/bin/hhblits

# environment variable needed for HH-suite
export HHLIB=$hhsuite_dir

# Basenames of HHblits and PSI-BLAST databses (latter can be UniRef90 or NCBI nr)
hhblits_db=$HOME/working/hhblitsdb/uniclust30_2018_08/uniclust30_2018_08
psiblast_db=$maindir/data/blast/nr

# Legacy BLAST executables
blastpgp=$bindir/blastpgp
makemat=$bindir/makemat

# CCMpred and FreeContact executables
ccmpred=$bindir/ccmpred
freecontact=$bindir/freecontact

# environment variables needed for legacy BLAST; dirs containing BLAST matrices (e.g. BLOSUM62) and database
export BLASTMAT=$maindir/data/blast
export BLASTDB=$maindir/data/blast

# number of threads to use in various programs
psiblast_threads=4
hhblits_threads=4
psicov_threads=6
ccmpred_threads=6
freecontact_threads=8

# timeouts for CCMpred and PSICOV (in seconds)
ccmpred_timeout=86400
psicov_timeout=86400

# End of user variables
#####################################################

# DMP neural net models are stored here
deepdir=$maindir/deepmetapsicov_consens


help_text="""
usage: $0 [-h] -i input_fasta [-a alignment_file] [-o contact_file] [-m mtx_file] [--force] [--cleanup]

DeepMetaPSICOV (DMP) v1.1.0 by Shaun M. Kandathil, Joe G. Greener, and David T. Jones

required arguments:
  -i input_fasta, --input-fasta input_fasta
                        FASTA-formatted file with target sequence.
optional arguments:
  -h, --help            show this help message and exit.
  --force               Force generation of intermediate files and contacts, even if these already exist.
                        By default, any existing intermediate files with the correct paths are reused.
                        IMPORTANT: --force DOES NOT force a re-run of the HHblits and PSI-BLAST steps.
                                  Also, the contact prediction step is always run, regardless of --force.
  -a alignment_file, --input-aln alignment_file
                        Path to input alignment in PSICOV format.
                        If supplied, HHblits will not be run to generate an input alignment.
  -m mtx_file, --psiblast-mtx mtx_file
                        Path to legacy PSI-BLAST PSSM file generated by 'makemat -P' for target sequence (extension .mtx).
                        If supplied, PSI-BLAST and makemat will not be run.
  -o contact_file, --output-file contact_file
                        Filename for output contacts in CASP format.
                        The default is to create a file with the extension '.deepmetapsicov.con' and the basename of the input file.
  --cleanup             Clean up intermediate files. If --cleanup is specified, only the PSI-BLAST PSSM, PSICOV-formatted alignment,
                        and the final contact file will be retained.
                        The default is to not perform any clean-up, since some of the intermediate files take time to generate!
                        If any step in the DMP pipeline fails, no cleanup is done, even if --cleanup is specified.
"""


# function make_fasta_from_aln() {
#     aln=$1
#     fasta=$2
#     bn=$(basename $aln | cut -d '.' -f 1)
#     echo ">$bn" > $fasta
#     head -n 1 $aln >> $fasta
# }

# other options:

if [ -z "$*" ]; then
    printf "$help_text"
    exit 0
fi

# parse args
force=0
cleanup=0
while [[ $# -ge 1 ]]
do
    key="$1"

    case $key in
        -h|--help)
            echo "$help_text"
            exit 0
            ;;
        -m|--psiblast-mtx)
            mtxfile="$2"
            shift # extra shift since this arg has a value
            ;;
        -a|--input-aln)
            input_aln="$2"
            shift
            ;;
	-i|--input-fasta)
	    input_fasta="$2"
	    shift
	    ;;
        -o|--output-file)
            output_file="$2"
            shift
            ;;
	--force)
	    force=1
	    ;;
	--cleanup)
	    cleanup=1
	    ;;
        *)
            # process any other argument not specified above.
            # cannot recognise when such an argument also has a value e.g. -f <filename>
            # but we'll treat that value as another (hopefully unrecognised) argument.
            echo "$0: Warning: unrecognised option $key will be ignored." >&2
            ;;
    esac
    shift # this is the "default" shift
done

### check args
# At a minimum, user must must supply fasta sequence.
# TODO If aln and fasta are supplied, use supplied fasta but check length of seq matches aln. Handle multiline fastas.
# TODO could check for sequence presence in aln too.

if [ -z $input_fasta ]; then
    echo "$0: ERROR: you must supply a FASTA file containing your target sequence using the -i option." >&2
    exit 1
elif [ ! -s $input_fasta ]; then
    echo "$0: ERROR: supplied FASTA file $input_fasta not found or is empty." >&2
    exit 1
fi

prefix1=$(basename $input_fasta)
prefix=${prefix1%.*} # extract string up to the last '.'
tempdir=$(dirname $input_fasta)

no_aln=0
aln_path=$tempdir/$prefix.aln


if [ -z $input_aln ]; then
    # if aln_path already exists, warn and exit
    if [ -s $aln_path ]; then
	echo "$0: WARNING: possible alignment file found at $aln_path."
	echo "       If you wish to use this file for input, please use the -a option."
	echo "       Otherwise, move, rename or delete this file. DMP will now exit."
	exit 1
	#    mv -v $aln_path $aln_path.old
    fi
    no_aln=1  # We will run HHblits etc to make the input aln
elif [ ! -s $input_aln ]; then
    echo "$0: ERROR: supplied alignment $input_aln not found or is empty." >&2
    exit 1
else
    aln_path=$input_aln
fi

if [ -z $output_file ]; then
    output_file=$tempdir/$prefix.deepmetapsicov.con
fi

no_mtx=0
mtx_path=$tempdir/$prefix.mtx

if [ -z $mtxfile ]; then
    # if mtx_path already exists, warn and exit
    if [ -s $mtx_path ]; then
	echo "$0: WARNING: possible PSI-BLAST PSSM file found at $mtx_path."
	echo "       If you wish to use this file for input, please use the -m option."
	echo "       Otherwise, move, rename or delete this file. DMP will now exit."
	exit 1
	#    mv -v $mtx_path $mtx_path.old
    fi
    no_mtx=1
elif [ ! -s $mtxfile ]; then
    echo "$0: ERROR: supplied PSI-BLAST matrix $mtxfile not found or is empty." >&2
    exit 1
else
    mtx_path=$mtxfile
fi

# del_mtx_link=0
# if [ -s $mtxfile ]; then
#     # if $mtxfile == $tempdir/$prefix.mtx, linking is a bad idea
#     if [ "$mtxfile" != "$tempdir/$prefix.mtx" ]; then       
# 	ln -s $mtxfile $tempdir/$prefix.mtx
# 	del_mtx_link=1
#     fi
# elif [ ! -z $mtxfile ] && [ ! -s $mtxfile ]; then
#     echo "$0: ERROR: supplied PSI-BLAST PSSM file $mtxfile not found or is empty." >&2
#     exit 1
# fi


set -u

ulimit -s unlimited  # need this for alnstats

## Run (legacy) PSI-BLAST and makemat if needed
if [ $no_mtx == 1 ]; then
    # run_psiblast=1

    # if [ -s $tempdir/$prefix.blast ] && [ -s $tempdir/$prefix.chk ]; then
    # 	# rare case where blastpgp completes but nothing else; check if psiblast run completed successfully
    # 	diff -q $maindir/psiblast-tail-check <(tail -n 7 $tempdir/$prefix.blast | cut -c 1-3) >/dev/null
    # 	if [ $? == 0 ]; then
    # 	    run_psiblast=0
    # 	    echo "Using existing PSI-BLAST .blast and .chk files."
    # 	fi
    # fi

    # if [ $run_psiblast == 1 ]; then
    echo "Running PSI-BLAST..."
    $blastpgp -a $psiblast_threads -b 0 -v 2000 -j 3 -h 0.001 -e 0.001 -d $psiblast_db -i $tempdir/$prefix.fasta -C $tempdir/$prefix.chk > $tempdir/$prefix.blast
    if [ $? != 0 ]; then
	echo "DMP ERROR 01 (PSI-BLAST failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 1
    fi
    # fi

    echo "$prefix.chk" > $tempdir/$prefix.pn
    echo "$prefix.fasta" > $tempdir/$prefix.sn

    echo "Running makemat..."
    $makemat -P $tempdir/$prefix > /dev/null
    if [ $? != 0 ]; then
	echo "DMP ERROR 02 (makemat failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 2
    fi
else
    echo "Using existing PSI-BLAST mtx file at $mtxfile."
fi

## (Optionally) Make HHblits alignment.
if [ $no_aln == 1 ]; then
    echo "Running HHblits..."
    $hhblits -i $tempdir/$prefix.fasta -n 3 -e 0.001 -d $hhblits_db -cpu $hhblits_threads -oa3m $tempdir/$prefix.a3m -diff inf -cov 50 -id 99 > $tempdir/$prefix.hhblog 2>&1
    if [ $? != 0 ]; then
	echo "DMP ERROR 03 (HHblits failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 3
    fi
    
    # convert a3m to PSICOV format
    grep -v '^>' $tempdir/$prefix.a3m | sed 's/[a-z]//g' > $tempdir/$prefix.hhbaln
    if [ $? != 0 ]; then
	echo "DMP ERROR 04 (shell cmd failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 4
    fi

    seqlen=$(head -n 1 $tempdir/$prefix.hhbaln | wc -c)
    naln_hhblits=$(cat $tempdir/$prefix.hhbaln | wc -l)
    ((rec=seqlen*10))
    if [ $naln_hhblits -lt $rec ]; then
	echo "$0: WARNING: HHblits alignment has fewer sequences ($naln_hhblits) than recommended ($rec)." >&2
    fi

    mv $tempdir/$prefix.hhbaln $aln_path
else
    echo "Using existing input alignment at $aln_path."
fi

##### Now we have aln and mtx; run DMP pipeline

# PSIPRED stage 1
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.ss ]; then
    echo 'Running PSIPRED stage 1...'
    $bindir/psipred $mtx_path $maindir/data/psipred4/weights.dat $maindir/data/psipred/weights.dat2 $maindir/data/psipred/weights.dat3 > $tempdir/$prefix.ss
    if [ $? != 0 ]; then
	echo "DMP ERROR 06 (PSIPRED stage 1 failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 6
    fi
else
    echo 'Using existing PSIPRED stage 1 file.'
fi

# PSIPRED stage 2
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.ss2 ]; then
    echo 'Running PSIPRED stage 2...'
    $bindir/psipass2 $maindir/data/psipred4/weights_p2.dat 1 1.0 1.0 $tempdir/$prefix.ss2 $tempdir/$prefix.ss > /dev/null
    if [ $? != 0 ]; then
	echo "DMP ERROR 07 (PSIPRED stage 2 failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 7
    fi
else
    echo 'Using existing PSIPRED stage 2 file.'
fi

# SOLVPRED
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.solv ]; then
    echo 'Running SOLVPRED...'
    $bindir/solvpred $mtx_path $maindir/data/weights_solv.dat > $tempdir/$prefix.solv
    if [ $? != 0 ]; then
	echo "DMP ERROR 08 (SOLVPRED failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 8
    fi
else
    echo 'Using existing SOLVPRED file.'
fi

# Alignment statistics (alnstats)
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.colstats ] || [ ! -s $tempdir/$prefix.pairstats ]; then
    echo 'Running alnstats...'
    $bindir/alnstats $aln_path $tempdir/$prefix.colstats $tempdir/$prefix.pairstats > /dev/null
    if [ $? != 0 ]; then
	echo "DMP ERROR 09 (alnstats failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 9
    fi
else
    echo 'Using existing alignment statistics files.'
fi

naln=$(cat $aln_path | wc -l)

if [ $naln -ge 5 ]; then
    # PSICOV
    if [ $force == 1 ] || [ ! -e $tempdir/$prefix.psicov ]; then
	echo "Running PSICOV..."
	timeout $psicov_timeout $bindir/psicov -z $psicov_threads -o -d 0.03 $aln_path > $tempdir/$prefix.psicov 2>&1
	psicovret=$?
	if [ $psicovret == 124 ]; then
	    echo 'PSICOV timed out. This is not a critical error.'
	elif [ $psicovret != 0 ]; then
	    echo "DMP ERROR 10 (PSICOV gave exit code $psicovret) - please report error to psipred@cs.ucl.ac.uk" >&2
	    exit 10
	fi
    else
	echo "Using existing PSICOV predictions."
	if [ ! -s $tempdir/$prefix.psicov ]; then
	    echo "WARNING: PSICOV file is empty; possibly the result of a run that timed out." >&2
	fi
    fi

    # CCMpred
    if [ $force == 1 ] || [ ! -e $tempdir/$prefix.ccmpred ]; then
	echo "Running CCMpred..."
	timeout $ccmpred_timeout $ccmpred -t $ccmpred_threads $aln_path $tempdir/$prefix.ccmpred > /dev/null 2>&1
	ccmret=$?
	if [ $ccmret == 124 ]; then
	    echo 'CCMpred timed out. This is not a critical error.'
	elif [ $ccmret != 0 ]; then
	    echo "DMP ERROR 11 (CCMpred gave exit code $ccmret) - please report error to psipred@cs.ucl.ac.uk" >&2
	    exit 11
	fi
    else
	echo "Using existing CCMpred predictions."
	if [ ! -s $tempdir/$prefix.ccmpred ]; then
	    echo "WARNING: CCMpred file is empty; possibly the result of a run that timed out." >&2
	fi
    fi	

    # FreeContact
    if [ $force == 1 ] || [ ! -e $tempdir/$prefix.evfold ]; then    
	# no timeout on this one as it tends to be quick enough
	echo "Running FreeContact..."
	$freecontact -a $freecontact_threads < $aln_path > $tempdir/$prefix.evfold
	if [ $? != 0 ]; then
	    echo "DMP ERROR 12 (freecontact failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	    exit 12
	fi
    else
	echo "Using existing FreeContact predictions."
	if [ ! -s $tempdir/$prefix.evfold ]; then
	    echo "WARNING: FreeContact file is empty." >&2
	fi
    fi

else
    echo 'WARNING: alignment has too few sequences; PSICOV, CCMpred and FreeContact will not be run.' >&2
fi

touch $tempdir/$prefix.psicov $tempdir/$prefix.evfold $tempdir/$prefix.ccmpred
if [ $? != 0 ]; then
    echo "DMP ERROR 13 (touch failure) - please report error to psipred@cs.ucl.ac.uk" >&2
    exit 13
fi

# 60-channel 'map' inputs
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.deepmetapsicov.map ] || [ ! -s $tempdir/$prefix.deepmetapsicov.fix ]; then
    echo 'Preparing DMP input files (1 of 2)...'
    $bindir/deepmetapsicov_makepredmap \
	$tempdir/$prefix.colstats \
	$tempdir/$prefix.pairstats \
	$tempdir/$prefix.psicov \
	$tempdir/$prefix.evfold \
	$tempdir/$prefix.ccmpred \
	$tempdir/$prefix.ss2 \
	$tempdir/$prefix.solv \
	$tempdir/$prefix.deepmetapsicov.map \
	$tempdir/$prefix.deepmetapsicov.fix > /dev/null 2>&1
    if [ $? != 0 ]; then
	echo "DMP ERROR 14 (makepredmap failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 14
    fi
else
    echo 'Using existing DMP map input.'
fi

# 441-channel covariance inputs
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.deepmetapsicov.21c ]; then
    echo 'Preparing DMP input files (2 of 2)...'
    $bindir/cov21stats $aln_path $tempdir/$prefix.deepmetapsicov.21c > /dev/null 2>&1
    if [ $? != 0 ]; then
	echo "DMP ERROR 15 (cov21stats failure) - please report error to psipred@cs.ucl.ac.uk" >&2
	exit 15
    fi
else
    echo 'Using existing DMP covariances.'
fi

# Actually run the predictor. This is run regardless of --force.
echo 'Predicting contacts...'
$python $deepdir/pytorch_metacov_consenspred_030model.py \
    $tempdir/$prefix.deepmetapsicov.21c \
    $tempdir/$prefix.deepmetapsicov.map > $output_file
if [ $? != 0 ]; then
    echo "DMP ERROR 16 (DMP predictor failure) - please report error to psipred@cs.ucl.ac.uk" >&2
    exit 16
fi

# if a custom mtx was supplied, delete the link we made
# [ $del_mtx_link ] && rm $tempdir/$prefix.mtx

### Optional cleanup
if [ $cleanup == 1 ]; then
    echo "Cleaning up..."
    # things not cleaned up: fasta aln mtx deepmetapsicov.con
    for ext in aux blast ss ss2 solv colstats pairstats ccmpred evfold psicov mn pn sn hhblog hhr chk a3m deepmetapsicov.21c deepmetapsicov.map deepmetapsicov.fix
    do
	rm -f $tempdir/${prefix}.${ext}
    done
fi

echo 'Done.'
